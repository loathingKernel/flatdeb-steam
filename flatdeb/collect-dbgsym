#!/usr/bin/python3

# Copyright 2016-2017 Simon McVittie
# Copyright 2017-2023 Collabora Ltd.
#
# SPDX-License-Identifier: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

"""
Fetch detached debug symbols for packages installed in the given sysroot.
"""

import argparse
import logging
import os
import subprocess
import sys
from itertools import product

try:
    import typing
except ImportError:
    pass
else:
    typing  # silence "unused" warnings

from debian.deb822 import Packages


logger = logging.getLogger('flatdeb.collect-dbgsym')


class InstalledPackage:
    def __init__(self, fields):
        # type: (typing.Sequence[str]) -> None
        self.qualified_binary = fields[0]
        self.binary = self.qualified_binary.split(':')[0]
        self.binary_version = fields[1]
        self.source = fields[2] or self.binary

        if ':' not in self.qualified_binary:
            self.architecture = None    # type: typing.Optional[str]
        else:
            self.architecture = self.qualified_binary.split(':')[-1]

    @property
    def is_debug(self):
        # type: () -> bool
        return self.binary.endswith('-dbg') or self.binary.endswith('-dbgsym')

    def __str__(self):
        # type: () -> str
        return '{}_{}'.format(self.qualified_binary, self.binary_version)

    def __hash__(self):
        # type: () -> int
        return hash(self.qualified_binary) ^ hash(self.binary_version)

    def __eq__(self, other):
        # type: (typing.Any) -> bool
        if isinstance(other, InstalledPackage):
            return (
                self.qualified_binary,
                self.binary_version,
                self.source,
            ) == (
                other.qualified_binary,
                other.binary_version,
                other.source,
            )
        else:
            return NotImplemented

    def __lt__(self, other):
        # type: (typing.Any) -> bool
        if isinstance(other, InstalledPackage):
            return (
                self.qualified_binary,
                self.binary_version,
                self.source,
            ) < (
                other.qualified_binary,
                other.binary_version,
                other.source,
            )
        else:
            return NotImplemented

    @property
    def dbgsym_package(self):
        # type: () -> str
        if self.is_debug:
            return self.binary

        return self.binary + '-dbgsym'

    @property
    def qualified_dbgsym_package(self):
        # type: () -> str
        if self.is_debug:
            return self.qualified_binary

        if ':' in self.qualified_binary:
            return self.qualified_binary.replace(':', '-dbgsym:')
        else:
            return self.qualified_binary + '-dbgsym'


def read_manifest(path):
    # type: (str) -> typing.List[InstalledPackage]

    ret = []

    with open(path, encoding='utf-8') as reader:
        for line in reader:
            line = line.rstrip('\n')

            if not line:
                continue

            if line.startswith('#'):
                continue

            assert '\t' in line, repr(line)
            ret.append(InstalledPackage(line.rstrip('\n').split('\t')))

    return ret


def main():
    # type: (...) -> None
    parser = argparse.ArgumentParser(
        description='Install corresponding -dbgsym packages if available',
    )
    parser.add_argument('--primary-architecture', default=None)
    parser.add_argument('--debug', action='store_true', default=False)
    parser.add_argument(
        '--download', metavar='DIR', default='',
        help='Download to DIR [default: install]',
    )
    parser.add_argument(
        '--include-executables', action='store_true', default=False,
        help=(
            'Download executables, not just detached debug symbols. '
            'Only useful with --download.'
        ),
    )
    parser.add_argument('--platform-manifest', action='append', default=[])
    parser.add_argument('--sdk-manifest', action='append', default=[])
    parser.add_argument('--sysroot', default='/')

    args = parser.parse_args()

    if args.sysroot == '/':
        in_chroot = []
        in_chroot_quick = []

        if args.download:
            in_chroot.extend([
                'sh', '-euc', 'cd "$1"; shift; exec "$@"', 'sh',
                args.download,
            ])
    else:
        in_chroot = [
            'systemd-nspawn',
            '--directory={}'.format(args.sysroot),
            '--as-pid2',
            '--tmpfs=/run/lock',
            '--register=no',
        ]
        in_chroot_quick = [
            'chroot', args.sysroot,
        ]

        if args.download:
            in_chroot.extend([
                '--bind={}:{}'.format(
                    os.path.realpath(args.download),
                    '/usr/lib/debug',
                ),
                '--chdir=/usr/lib/debug',
            ])

    in_chroot.append('env')

    for var in ('ftp_proxy', 'http_proxy', 'https_proxy', 'no_proxy'):
        if var in os.environ:
            in_chroot.append('{}={}'.format(var, os.environ[var]))

    wanted_packages = set()     # type: typing.Set[InstalledPackage]
    to_inspect = set()          # type: typing.Set[str]
    names = set()               # type: typing.Set[str]

    for platform_manifest in args.platform_manifest:
        platform_packages = read_manifest(platform_manifest)

        for want in platform_packages:
            logger.info('Package in Platform: %s from %s', want, want.source)
            wanted_packages.add(want)
            names.add(want.dbgsym_package)
            to_inspect.add(
                '{}={}'.format(
                    want.qualified_dbgsym_package,
                    want.binary_version,
                )
            )

            if args.include_executables:
                names.add(want.binary)
                to_inspect.add(
                    '{}={}'.format(
                        want.qualified_binary,
                        want.binary_version,
                    )
                )

    for sdk_manifest in args.sdk_manifest:
        sdk_packages = read_manifest(sdk_manifest)

        for want in sdk_packages:
            if want.is_debug:
                logger.info(
                    'Debug package in SDK: %s from %s', want, want.source,
                )
                wanted_packages.add(want)
                to_inspect.add(
                    '{}={}'.format(
                        want.qualified_binary,
                        want.binary_version,
                    )
                )

    if args.primary_architecture is None:
        args.primary_architecture = subprocess.run(
            in_chroot_quick + ['dpkg', '--print-architecture'],
            stdout=subprocess.PIPE,
        ).stdout.decode('ascii').strip()

    result = subprocess.run(
        in_chroot_quick + ['apt-cache', 'show'] + list(to_inspect),
        stdout=subprocess.PIPE,
    )

    binaries = []       # type: typing.List[Packages]
    to_get = set()      # type: typing.Set[str]
    lines = result.stdout.splitlines(keepends=True)
    dbgsym_found = set()    # type: typing.Set[str]

    for binary_stanza in Packages.iter_paragraphs(
        sequence=lines,
        encoding='utf-8',
    ):
        if 'Filename' not in binary_stanza:
            # locally-installed but not available from apt
            continue

        name = binary_stanza['Package']

        if name.endswith('-dbgsym'):
            dbgsym_found.add(name)
            binaries.append(binary_stanza)

        if name.endswith('-dbg'):
            dbgsym_found.add(name)
            binaries.append(binary_stanza)

    # Only fetch executables if the package they come from has a
    # corresponding -dbg or -dbgsym package, to avoid wasting space on
    # things that don't include any ELF executables/libraries anyway
    if args.include_executables:
        for binary_stanza in Packages.iter_paragraphs(
            sequence=lines,
            encoding='utf-8',
        ):
            if 'Filename' not in binary_stanza:
                continue

            name = binary_stanza['Package']

            if (
                name + '-dbgsym' in dbgsym_found
                or name + '-dbg' in dbgsym_found
                # Special cases for a few libraries that continued to use
                # legacy -dbg for a while even after -dbgsym became available,
                # with a legacy -dbg package not matching the name of the
                # library package
                or name in (
                    'libdbus-1-3',
                    'libogg0',
                    'libopus0',
                    'libstdc++6',
                )
            ):
                binaries.append(binary_stanza)

    if args.download:
        parent = args.download
    else:
        parent = os.path.join(
            args.sysroot, 'usr', 'lib', 'debug',
        )
        os.makedirs(parent, exist_ok=True)

    with open(
        os.path.join(parent, 'dbgsym-packages-installed.txt'),
        'w',
    ) as writer, open(
        os.path.join(parent, 'dbgsym-packages-not-installed.txt'),
        'w',
    ) as missing_writer:
        if args.include_executables:
            exe_modes = [True, False]
        else:
            exe_modes = [False]

        for want, exe in product(sorted(wanted_packages), exe_modes):
            if exe:
                if want.is_debug:
                    continue

                name = want.binary
                qualified = want.qualified_binary
                label = 'executable code'
            else:
                name = want.dbgsym_package
                qualified = want.qualified_dbgsym_package
                label = '-dbgsym package'

            same_name = []      # type: typing.List[Packages]

            for binary_stanza in binaries:
                if name == binary_stanza['Package']:
                    same_name.append(binary_stanza)

            if not same_name:
                logger.info(
                    'Skipped nonexistent %s: %s', label, name,
                )
                continue

            for binary_stanza in same_name:
                source = binary_stanza.get('Source', name)

                # It's important to check this to avoid including debug
                # symbols that would require new source code that is not
                # already required by the non-debug packages
                if want.source != source:
                    continue

                if want.binary_version != binary_stanza['Version']:
                    continue

                if (
                    want.architecture is not None
                    and want.architecture != binary_stanza['Architecture']
                ):
                    continue

                if (
                    not args.download
                    and want.architecture is not None
                    and want.architecture != args.primary_architecture
                    and binary_stanza.get('Multi-Arch', 'no') != 'same'
                ):
                    logger.info(
                        'Not installing %s %s: not Multi-Arch: same',
                        label, qualified,
                    )
                    continue

                logger.info(
                    'Will install %s from %s:%s_%s',
                    label,
                    name,
                    binary_stanza['Architecture'],
                    binary_stanza['Version'],
                )
                writer.write('{}:{}\t{}\n'.format(
                    name,
                    binary_stanza['Architecture'],
                    binary_stanza['Version'],
                ))
                to_get.add('{}:{}={}'.format(
                    name,
                    binary_stanza['Architecture'],
                    binary_stanza['Version'],
                ))
                break
            else:
                logger.warning(
                    'Unable to install %s: %s_%s from %s',
                    label,
                    qualified,
                    want.binary_version,
                    want.source,
                )
                missing_writer.write('{}\t{}\n'.format(
                    qualified,
                    want.binary_version,
                ))

                for binary_stanza in same_name:
                    logger.info('Available version:\n%s', binary_stanza)

    if not to_get:
        logger.info('Nothing to do')
        return

    for spec in sorted(to_get):
        logger.info('To download: %s', spec)

    options = ['-y', '-m', '-q', '-oAcquire::Retries=3']

    if args.debug:
        options.append('-oDebug::pkgDepCache::AutoInstall=true')
        options.append('-oDebug::pkgDepCache::Marker=true')
        options.append('-oDebug::pkgPolicy=true')
        options.append('-oDebug::pkgProblemResolver=true')
        options.append('-oDebug::pkgProblemResolver::ShowScores=true')

    if args.download:
        subprocess.run(
            in_chroot + ['apt-get'] + options + ['download'] + sorted(to_get),
            check=True,
        )
    else:
        subprocess.run(
            in_chroot + ['apt-get'] + options + ['install'] + sorted(to_get),
            check=True,
        )


if __name__ == '__main__':
    if sys.stderr.isatty():
        try:
            import colorlog
        except ImportError:
            logging.basicConfig()
        else:
            formatter = colorlog.ColoredFormatter(
                '%(log_color)s%(levelname)s:%(name)s:%(reset)s %(message)s')
            handler = logging.StreamHandler()
            handler.setFormatter(formatter)
            logging.getLogger().addHandler(handler)
    else:
        logging.basicConfig()

    logging.getLogger().setLevel(logging.DEBUG)

    try:
        main()
    except KeyboardInterrupt:
        raise SystemExit(130)
    except subprocess.CalledProcessError as e:
        logger.error('%s', e)
        raise SystemExit(1)
