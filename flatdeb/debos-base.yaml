{{/*
Copyright 2018-2021 Collabora Ltd.
SPDX-License-Identifier: MIT
*/}}

{{- $architecture := or .architecture "amd64" -}}
{{- /* Use a YAML list here */ -}}
{{- $components := or .components "" -}}
{{- $suite := or .suite "stretch" -}}
{{- $foreignarchs := or .foreignarchs "" -}}
{{- $mirror := or .mirror "http://deb.debian.org/debian" -}}
{{- $mergedusr := or .mergedusr "false" }}
{{- $keyring := or .keyring "" -}}
{{- $additional_base_packages := or .additional_base_packages "" -}}
{{- $build_id := or .build_id "" -}}
{{- $variant := or .variant "Minimal base system" -}}
{{- $variant_id := or .variant_id "base" -}}
{{- $artifact_prefix := or .artifact_prefix (printf "base-%s-%s" $suite $architecture) -}}
{{- $ospack := or .ospack (printf "%s.tar.gz" $artifact_prefix) -}}
{{- $strip_source_version_suffix := or .strip_source_version_suffix "" -}}

architecture: {{ $architecture }}

actions:
  # Make sure Ubuntu precise doesn't try to migrate /run
  - action: run
    label: create skeleton chroot
    command: |
      set -e
      echo
      install -d "$ROOTDIR"
      install -d "$ROOTDIR/run"
      install -d "$ROOTDIR/var"
      ln -fns /run "$ROOTDIR/var/run"
      ln -fns /dev/shm "$ROOTDIR/run/shm"

  - action: run
    label: debootstrap
    chroot: false
    command: |
      set -e
      "$RECIPEDIR/debootstrap" \
          --components "{{ $components }}" \
          --keyring-file "{{ $keyring }}" \
          "{{ $suite }}" \
          "$ROOTDIR" \
          "{{ $mirror }}"

  - action: overlay
    source: suites/{{ $suite }}/overlay

  - action: run
    label: remove extra apt sources
    chroot: false
    command: |
      set -e
      echo
      rm -fr "$ROOTDIR/etc/apt/sources.list.d"
      mkdir "$ROOTDIR/etc/apt/sources.list.d"

  - action: run
    label: clean up bootstrap apt configuration
    chroot: false
    command: |
      set -e
      echo
      rm -frv "$ROOTDIR/etc/apt/trustdb.gpg"
      rm -frv "$ROOTDIR/etc/apt/trustdb.gpg~"
      rm -frv "$ROOTDIR/etc/apt/trusted.gpg"
      rm -frv "$ROOTDIR/etc/apt/trusted.gpg~"

  - action: run
    label: list apt configuration
    chroot: false
    command: 'find "$ROOTDIR/etc/apt" -ls'

  {{ if $additional_base_packages }}
  - action: run
    label: additional base packages
    chroot: false
    command: |
      set -eux
      install -d -m755 "$ROOTDIR/run"
      echo "{{ $additional_base_packages }}" > "$ROOTDIR/run/packages.yaml"
      "$RECIPEDIR/apt-install" \
          --debug \
          --update \
          --without-recommends \
          "$ROOTDIR" \
          "$ROOTDIR/run/packages.yaml"
      echo "end"
  {{ end }}

  - action: run
    label: disable-services
    chroot: false
    command: 'echo; "$RECIPEDIR/disable-services" "$ROOTDIR"'

  - action: run
    label: clean-up-base
    chroot: false
    command: 'echo; "$RECIPEDIR/clean-up-base" "$ROOTDIR"'

  {{ if eq $mergedusr "after_debootstrap" }}
  - action: run
    label: usrmerge
    chroot: false
    command: 'echo; "$RECIPEDIR/usrmerge" "$ROOTDIR"'
  {{ end }}

  {{ if $foreignarchs }}
  - action: run
    label: add-foreign-architectures
    chroot: true
    command: |
      set -eux
      for a in {{ $foreignarchs }}; do
        dpkg --add-architecture "$a"
      done
  {{ end }}

  - action: run
    label: apt update
    chroot: true
    command: 'apt-get -y -q -oAcquire::Retries=3 update'

  - action: run
    label: apt dist-upgrade
    chroot: true
    command: 'echo; DEBIAN_FRONTEND=noninteractive apt-get -y -q -oAcquire::Retries=3 dist-upgrade'

  - action: run
    label: write-manifest
    chroot: false
    command: |
      set -e
      echo
      "$RECIPEDIR/write-manifest" "$ROOTDIR"
      "$RECIPEDIR/list-required-source-code" \
        --output="$ARTIFACTDIR/{{ $artifact_prefix }}.source-required.txt" \
        --sysroot="$ROOTDIR" \
        --strip-source-version-suffix="{{ $strip_source_version_suffix }}" \
        ${NULL+}
      cp "$ROOTDIR/usr/manifest.dpkg" "$ARTIFACTDIR/{{ $artifact_prefix }}.manifest.dpkg"
      cp "$ROOTDIR/usr/manifest.dpkg.built-using" "$ARTIFACTDIR/{{ $artifact_prefix }}.manifest.dpkg.built-using"
      cp "$ROOTDIR/usr/manifest.deb822.gz" "$ARTIFACTDIR/{{ $artifact_prefix }}.manifest.deb822.gz"
      cp "$ROOTDIR/etc/apt/sources.list" "$ARTIFACTDIR/{{ $artifact_prefix }}.sources.list"

      if test -e "$ROOTDIR/etc/os-release" && ! test -e "$ROOTDIR/usr/lib/os-release"; then
        rm -f "$ROOTDIR/usr/lib/os-release"
        mv "$ROOTDIR/etc/os-release" "$ROOTDIR/usr/lib/os-release"
        ln -fns ../usr/lib/os-release "$ROOTDIR/etc/os-release"
      fi

      if test -e "$ROOTDIR/usr/lib/os-release"; then
        "$RECIPEDIR/set-build-id" \
          --build-id="{{ $build_id }}" \
          --variant="{{ $variant }}" \
          --variant-id="{{ $variant_id }}" \
          "$ROOTDIR"

        cp "$ROOTDIR/usr/lib/os-release" "$ARTIFACTDIR/{{ $artifact_prefix }}.os-release.txt"
      fi

  # No point in archiving these
  - action: run
    label: clean-up-before-pack
    chroot: false
    command: 'echo; "$RECIPEDIR/clean-up-before-pack" "$ROOTDIR"'

  - action: pack
    compression: gz
    file: {{ $ospack }}

  - action: run
    label: pack base tarball
    chroot: false
    command: >
      set -e;
      echo;
      tar -cf "$ARTIFACTDIR/{{ $ospack }}"
      --numeric-owner
      --sort=name
      --use-compress-program="pigz -n --rsyncable"
      -C "$ROOTDIR"
      --transform="s,^./,,"
      .

  - action: run
    label: pack apt tarball
    chroot: false
    command: >
      set -e;
      echo;
      tar -cf "$ARTIFACTDIR/{{ $artifact_prefix }}.apt.tar.gz"
      --numeric-owner
      --sort=name
      --use-compress-program="pigz -n --rsyncable"
      -C "$ROOTDIR"
      --transform="s,^./,,"
      etc/apt
      var/lib/apt/lists

  - action: run
    label: manifests
    chroot: false
    command: >
      set -e;
      cd "$ROOTDIR";
      head -n10000
      usr/manifest.dpkg
      usr/manifest.dpkg.built-using

  - action: run
    label: metadata
    chroot: false
    command: >
      set -e;
      cd "$ROOTDIR";
      head -n10000
      etc/apt/apt.conf
      etc/apt/apt.conf.d/*
      etc/apt/sources.list
      etc/apt/sources.list.d/*
      etc/debian_chroot
      usr/lib/os-release
      || true
