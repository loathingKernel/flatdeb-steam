#!/bin/bash

# Copyright © 2016-2017 Simon McVittie
# Copyright © 2017-2018 Collabora Ltd.
#
# SPDX-License-Identifier: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Make files in a sysroot (chroot or similar) undergo the /usr merge.
# This is basically a simpler version of the usrmerge package. Unlike
# the usrmerge package, this does not attempt to set up all /libQUAL
# directories to undergo the /usr merge in future, only the ones that
# already exist.

set -e
set -u
set -o pipefail

me="$(basename "$0")"

if [ "$#" != 1 ] || [ "$1" = '--help' ] || [ "x$(id -u)" != x0 ] ||
        ! [ -d "$1" ]; then
    echo "$me: Usage:" >&2
    echo "    $me SYSROOT" >&2
    echo "" >&2
    echo "Run this script as root." >&2
    exit 2
fi

sysroot="$1"
cd "$sysroot"

in_chroot () {
    chroot "$sysroot" "$@"
}

unmerged=no

for f in bin sbin lib*; do
    if [ "$(in_chroot readlink -f "/$f")" != "/usr/$f" ]; then
        unmerged=yes
    fi
done

if [ "x$unmerged" = xno ]; then
    exit 0
fi

usrmerge () {
    local f="$1"

    in_chroot ls -dl "$f" "/usr$f" >&2 || true
    if [ "$(in_chroot readlink "$f")" = "/usr$f" ]; then
        echo "$me: Removing $f in favour of /usr$f" >&2
        rm -v -f "$sysroot$f"
    elif [ "$(in_chroot readlink "/usr$f")" = "$f" ]; then
        echo "$me: Removing /usr$f in favour of $f" >&2
        rm -v -f "$sysroot/usr$f"
    elif [ "$(in_chroot readlink -f "/usr$f")" = \
           "$(in_chroot readlink -f "$f")" ]; then
        echo "$me: /usr$f and $f are functionally identical" >&2
        rm -v -f "$sysroot$f"
    else
        echo "$me: Cannot merge $f with /usr$f" >&2
        exit 1
    fi
}

( cd "$sysroot"; find bin sbin lib* -not -xtype d -print0 ) |
while read -r -d '' f; do
    if chroot "$sysroot" test -e "/usr/$f"; then
        usrmerge "$sysroot" "/$f"
    fi
done

tar -cf- bin sbin lib* | tar -C usr -xf-
cd "$sysroot"
rm -fr bin sbin lib*
ln -vs usr/bin usr/sbin usr/lib* .
