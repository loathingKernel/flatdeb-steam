{{/*
Copyright 2018-2022 Collabora Ltd.
SPDX-License-Identifier: MIT
*/}}

{{- $architecture := or .architecture "amd64" -}}
{{- $flatpak_arch := or .flatpak_arch $architecture -}}
{{- $runtime := .runtime -}}
{{- $runtime_branch := or .runtime_branch "master" -}}
{{- $suite := or .suite "stretch" -}}

{{- $artifact_prefix := or .artifact_prefix (printf "%s-%s-%s" $runtime $flatpak_arch $runtime_branch) -}}
{{- $ospack := or .ospack (printf "base-%s-%s.tar.gz" $suite $architecture) -}}
{{- $sources_directory := or .sources_directory "" -}}
{{- $sources_prefix := or .sources_prefix (printf "%s-sources" $artifact_prefix) -}}
{{- $sources_tarball := or .sources_tarball "" -}}

architecture: {{ $architecture }}

actions:
  - action: unpack
    compression: gz
    file: {{ $ospack }}

  - action: run
    label: collect-source-code
    chroot: false
    command: |
      set -eux
      {{ if $sources_directory }}
      dir="$ARTIFACTDIR/{{ $sources_directory }}"
      {{ else }}
      dir="/scratch/src"
      {{ end }}
      install -m644 "$RECIPEDIR/flatpak-overlay/src/metadata" "$dir/metadata"
      echo
      "$RECIPEDIR/collect-source-code" \
        {{ if $sources_directory }}--output="$ARTIFACTDIR/{{ $sources_directory }}"{{ end }} \
        --sysroot="$ROOTDIR" \
        "$RECIPEDIR/source-required.txt"

  {{ if $sources_tarball }}
  - action: run
    label: pack source code
    chroot: false
    command: |
      set -eux
      {{ if $sources_directory }}
      dir="$ARTIFACTDIR/{{ $sources_directory }}"
      {{ else }}
      dir="/scratch/src"
      {{ end }}
      tar -cf "$ARTIFACTDIR/{{ $sources_tarball }}" \
        --numeric-owner \
        --sort=name \
        --transform='s,^./,files/,;s,^files/metadata$,metadata,' \
        --use-compress-program="pigz -n --rsyncable" \
        -C "$dir" \
        .
  {{ end }}

  - action: run
    label: list of included source code
    chroot: false
    command: |
      set -e
      cd "$ARTIFACTDIR"
      dir="{{ or $sources_directory "/scratch/src" }}"
      cp -v "$dir/Sources.gz" "{{ $sources_prefix }}.deb822.gz"
      cp -v "$dir/sources.txt" "{{ $sources_prefix }}.sources.txt"

  - action: run
    label: list of missing source code
    chroot: false
    command: >
      set -e;
      cd "$ARTIFACTDIR";
      dir="{{ or $sources_directory "/scratch/src" }}";
      test ! -e "$dir/MISSING.txt" ||
      cp -v "$dir/MISSING.txt"
      "{{ $sources_prefix }}.MISSING.txt"

  - action: run
    label: included
    chroot: false
    command: >
      set -e;
      cd "$ARTIFACTDIR";
      head -n10000
      {{ or $sources_directory "/scratch/src" }}/sources.txt
      || true

  - action: run
    label: missing
    chroot: false
    command: >
      set -e;
      cd "$ARTIFACTDIR";
      head -n10000
      {{ or $sources_directory "/scratch/src" }}/MISSING.txt
      || true
